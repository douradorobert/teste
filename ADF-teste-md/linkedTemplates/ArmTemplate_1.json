{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-teste-md"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AtualizaIGPDI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCotacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DiadeDivulgacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[getUltimaCotacaoSerie]",
								"storedProcedureParameters": {
									"IDSerie": {
										"type": "String",
										"value": {
											"value": "@variables('IDSerie_indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ScrapperCalendario",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ScrapperCalendarioDivulgacao",
							"method": "POST",
							"headers": {},
							"body": {
								"indice": "@{variables('indice')}"
							}
						},
						"linkedServiceName": {
							"referenceName": "ScrapperCalendarioIBRE",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "AtualizaBancodeDados",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ScrapperCalendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ScrapperCalendario').output.inserir_no_banco,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "AtualizaCalendarioBanco",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[db_datareader].[testeInsereDataDivulgacaoIbre]",
										"storedProcedureParameters": {
											"Data": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataDivulgacao": {
												"value": {
													"value": "@activity('ScrapperCalendario').output.dia",
													"type": "Expression"
												},
												"type": "String"
											},
											"Indice": {
												"value": {
													"value": "@variables('indice')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "rcPhoenixSAD410_ADF_Teste",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetDivulgacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "AtualizaBancodeDados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[GetCalendarioDivulgacaoIbreAtualizado]",
								"storedProcedureParameters": {
									"Indice": {
										"type": "String",
										"value": {
											"value": "@variables('indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DiadeDivulgacao",
						"description": "Verifica se hoje é dia de divulgação.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "MesDivulgacaoAtual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,\nformatDateTime(utcnow(), 'yyyy-MM-dd'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "EncerraPipeline",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('GetDivulgacaoAtualizada').output",
											"type": "Expression"
										},
										"errorCode": "Não é necessário fazer mais nada"
									}
								}
							]
						}
					},
					{
						"name": "MesDivulgacaoAtual",
						"description": "Verifica se o mês atual possui data de divulgação para o índice em questão.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetDivulgacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(utcnow(), 'MM'),\nsubstring(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,5,2))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Data de divulgação não corresponde ao atual",
										"errorCode": "Disparar email"
									}
								}
							]
						}
					},
					{
						"name": "CapturaNovoValor",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "GetCotacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('NovoIndice')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ScrapperIgpIBRE",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ScrapperIgpIBRE",
										"method": "POST",
										"headers": {},
										"body": {
											"indice": "@{variables('indice')}"
										}
									},
									"linkedServiceName": {
										"referenceName": "ScrapperIgpmIBRE",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ScrapperIgpIBRE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(float(activity('ScrapperIgpIBRE').output.valor),\n float(activity('GetCotacaoAtualizada').output.firstRow.Valor)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
													"storedProcedureParameters": {
														"Data": {
															"value": {
																"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "String"
														},
														"IDSerie": {
															"value": {
																"value": "@variables('IDSerie_indice')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Valor": {
															"value": {
																"value": "@activity('ScrapperIgpIBRE').output.valor",
																"type": "Expression"
															},
															"type": "Double"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "rcPhoenixSAD410_ADF_Teste",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Stored procedure1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "NovoIndice",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "00:04:00"
						}
					},
					{
						"name": "SendEmail",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CapturaNovoValor",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"indice": {
						"type": "String",
						"defaultValue": "IGPDI"
					},
					"IDSerie_indice": {
						"type": "String",
						"defaultValue": "30988"
					},
					"NovoIndice": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AtualizaIGPM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCotacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DiadeDivulgacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[getUltimaCotacaoSerie]",
								"storedProcedureParameters": {
									"IDSerie": {
										"type": "String",
										"value": {
											"value": "@variables('IDSerie_indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ScrapperCalendario",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ScrapperCalendarioDivulgacao",
							"method": "POST",
							"headers": {},
							"body": {
								"indice": "@{variables('indice')}"
							}
						},
						"linkedServiceName": {
							"referenceName": "ScrapperCalendarioIBRE",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "AtualizaBancodeDados",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ScrapperCalendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ScrapperCalendario').output.inserir_no_banco,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "AtualizaCalendarioBanco",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[db_datareader].[testeInsereDataDivulgacaoIbre]",
										"storedProcedureParameters": {
											"Data": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataDivulgacao": {
												"value": {
													"value": "@activity('ScrapperCalendario').output.dia",
													"type": "Expression"
												},
												"type": "String"
											},
											"Indice": {
												"value": {
													"value": "@variables('indice')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "rcPhoenixSAD410_ADF_Teste",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetDivulgacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "AtualizaBancodeDados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[GetCalendarioDivulgacaoIbreAtualizado]",
								"storedProcedureParameters": {
									"Indice": {
										"type": "String",
										"value": {
											"value": "@variables('indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DiadeDivulgacao",
						"description": "Verifica se hoje é dia de divulgação.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "MesDivulgacaoAtual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,\nformatDateTime(utcnow(), 'yyyy-MM-dd'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "EncerraPipeline",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "@activity('GetDivulgacaoAtualizada').output",
											"type": "Expression"
										},
										"errorCode": "Não é necessário fazer mais nada"
									}
								}
							]
						}
					},
					{
						"name": "MesDivulgacaoAtual",
						"description": "Verifica se o mês atual possui data de divulgação para o índice em questão.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetDivulgacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(utcnow(), 'MM'),\nsubstring(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,5,2))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Data de divulgação não corresponde ao atual",
										"errorCode": "Disparar email"
									}
								}
							]
						}
					},
					{
						"name": "CapturaNovoValor",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "GetCotacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('NovoIndice')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ScrapperIgpIBRE",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ScrapperIgpIBRE",
										"method": "POST",
										"headers": {},
										"body": {
											"indice": "@{variables('indice')}"
										}
									},
									"linkedServiceName": {
										"referenceName": "ScrapperIgpmIBRE",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ScrapperIgpIBRE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(float(activity('ScrapperIgpIBRE').output.valor),\n float(activity('GetCotacaoAtualizada').output.firstRow.Valor)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
													"storedProcedureParameters": {
														"Data": {
															"value": {
																"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "String"
														},
														"IDSerie": {
															"value": {
																"value": "@variables('IDSerie_indice')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Valor": {
															"value": {
																"value": "@activity('ScrapperIgpIBRE').output.valor",
																"type": "Expression"
															},
															"type": "Double"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "rcPhoenixSAD410_ADF_Teste",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Stored procedure1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "NovoIndice",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "00:04:00"
						}
					},
					{
						"name": "SendEmail",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CapturaNovoValor",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"indice": {
						"type": "String",
						"defaultValue": "IGPM"
					},
					"IDSerie_indice": {
						"type": "String",
						"defaultValue": "30990"
					},
					"NovoIndice": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AtualizaIGPM_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCotacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "MesDivulgacaoAtual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[getUltimaCotacaoSerie]",
								"storedProcedureParameters": {
									"IDSerie": {
										"type": "String",
										"value": {
											"value": "@variables('IDSerie_indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ScrapperCalendario",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ScrapperCalendarioDivulgacao",
							"method": "POST",
							"headers": {},
							"body": {
								"indice": "@{variables('indice')}"
							}
						},
						"linkedServiceName": {
							"referenceName": "ScrapperCalendarioIBRE",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "GetDivulgacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ScrapperCalendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[GetCalendarioDivulgacaoIbreAtualizado]",
								"storedProcedureParameters": {
									"Indice": {
										"type": "String",
										"value": {
											"value": "@variables('indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "MesDivulgacaoAtual",
						"description": "Verifica se o mês atual possui data de divulgação para o índice em questão.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetDivulgacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(utcnow(), 'MM'),\nsubstring(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,5,2))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Data de divulgação não corresponde ao atual",
										"errorCode": "Disparar email"
									}
								}
							]
						}
					},
					{
						"name": "CapturaNovoValor",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "GetCotacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('NovoIndice')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ScrapperIgpIBRE",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ScrapperIgpIBRE",
										"method": "POST",
										"headers": {},
										"body": {
											"indice": "@{variables('indice')}"
										}
									},
									"linkedServiceName": {
										"referenceName": "ScrapperIgpmIBRE",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ScrapperIgpIBRE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(float(activity('ScrapperIgpIBRE').output.valor),\n float(activity('GetCotacaoAtualizada').output.firstRow.Valor)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
													"storedProcedureParameters": {
														"Data": {
															"value": {
																"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "String"
														},
														"IDSerie": {
															"value": {
																"value": "@variables('IDSerie_indice')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Valor": {
															"value": {
																"value": "@activity('ScrapperIgpIBRE').output.valor",
																"type": "Expression"
															},
															"type": "Double"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "rcPhoenixSAD410_ADF_Teste",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Stored procedure1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "NovoIndice",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "00:04:00"
						}
					},
					{
						"name": "SendEmail",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CapturaNovoValor",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"indice": {
						"type": "String",
						"defaultValue": "IGPM"
					},
					"IDSerie_indice": {
						"type": "String",
						"defaultValue": "30990"
					},
					"NovoIndice": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AtualizaINCCM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetCotacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "GetDivulgacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[getUltimaCotacaoSerie]",
								"storedProcedureParameters": {
									"IDSerie": {
										"type": "String",
										"value": {
											"value": "@variables('IDSerie_indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ScrapperCalendario",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "ScrapperCalendarioDivulgacao",
							"method": "POST",
							"headers": {},
							"body": {
								"indice": "@{variables('indice')}"
							}
						},
						"linkedServiceName": {
							"referenceName": "ScrapperCalendarioIBRE",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "AtualizaBancodeDados",
						"description": "Atualiza a table do calendário de divulgação do índice no banco, se possível.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ScrapperCalendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ScrapperCalendario').output.inserir_no_banco,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "AtualizaCalendarioBanco",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[db_datareader].[testeInsereDataDivulgacaoIbre]",
										"storedProcedureParameters": {
											"Data": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "String"
											},
											"DataDivulgacao": {
												"value": {
													"value": "@activity('ScrapperCalendario').output.dia",
													"type": "Expression"
												},
												"type": "String"
											},
											"Indice": {
												"value": {
													"value": "@variables('indice')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "rcPhoenixSAD410_ADF_Teste",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetDivulgacaoAtualizada",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "AtualizaBancodeDados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[db_datareader].[GetCalendarioDivulgacaoIbreAtualizado]",
								"storedProcedureParameters": {
									"Indice": {
										"type": "String",
										"value": {
											"value": "@variables('indice')",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "rcPhoenixSAD410_ADF_Teste",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DiadeDivulgacao",
						"description": "Verifica se a última cotação salva foi divulgada após a data da última divulgação.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "MesDivulgacaoAtual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,\nformatDateTime(utcnow(), 'yyyy-MM-dd'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "InsereIndiceBanco1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
										"storedProcedureParameters": {
											"Data": {
												"value": {
													"value": "@subtractFromTime(formatDateTime(utcnow(), 'yyyy-MM-dd'),1,'Day')",
													"type": "Expression"
												},
												"type": "String"
											},
											"IDSerie": {
												"value": {
													"value": "@variables('IDSerie_indice')",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Valor": {
												"value": {
													"value": "@activity('GetCotacaoAtualizada').output.firstRow.Valor",
													"type": "Expression"
												},
												"type": "Double"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "rcPhoenixSAD410_ADF_Teste",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "EncerraPipeline",
									"description": "Não é um erro, apenas encerra o pipeline",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "InsereIndiceBanco1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": "FailMessage",
										"errorCode": "ErrorCode"
									}
								}
							]
						}
					},
					{
						"name": "CapturaNovoValor",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "DiadeDivulgacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('NovoIndice')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ScrapperInccmIBRE",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "ScrapperInccmIBRE",
										"method": "GET",
										"headers": {}
									},
									"linkedServiceName": {
										"referenceName": "ScrapperInccmIBRE",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "IndiceAtualizou",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ScrapperInccmIBRE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(equals(float(activity('ScrapperInccmIBRE').output.valor),\n float(activity('GetCotacaoAtualizada').output.firstRow.Valor)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 10
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Stored procedure1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
													"storedProcedureParameters": {
														"Data": {
															"value": {
																"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
																"type": "Expression"
															},
															"type": "String"
														},
														"IDSerie": {
															"value": {
																"value": "@variables('IDSerie_indice')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"Valor": {
															"value": {
																"value": "@activity('ScrapperInccmIBRE').output.valor",
																"type": "Expression"
															},
															"type": "Double"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "rcPhoenixSAD410_ADF_Teste",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Stored procedure1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "NovoIndice",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.00:10:00"
						}
					},
					{
						"name": "SendEmail",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "CapturaNovoValor",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "MesDivulgacaoAtual",
						"description": "Verifica se o mês atual possui data de divulgação para o índice em questão.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetCotacaoAtualizada",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(formatDateTime(utcnow(), 'MM'),\nsubstring(activity('GetDivulgacaoAtualizada').output.firstRow.DataDivulgacao,5,2))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SendEmail1",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Data de divulgação não corresponde ao atual",
										"errorCode": "Disparar email"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"indice": {
						"type": "String",
						"defaultValue": "INCCM"
					},
					"IDSerie_indice": {
						"type": "String",
						"defaultValue": "580040"
					},
					"NovoIndice": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TesteMoedasBacen')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoedasBacenCSV",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoedasBacen",
								"type": "DatasetReference",
								"parameters": {
									"a": "a"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "geraSeries",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "MoedasBacenCSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GeraSeriesMoedasBacen ",
							"method": "POST",
							"headers": {},
							"body": {
								"valores_moedas": "@string(activity('MoedasBacenCSV').output.value)"
							}
						},
						"linkedServiceName": {
							"referenceName": "geraSeriesMoedasBacen",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "geraSeries",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('geraSeries').output.valores",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[db_datareader].[InsereCotacaoSerieHistorica]",
										"storedProcedureParameters": {
											"Data": {
												"value": {
													"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd')",
													"type": "Expression"
												},
												"type": "String"
											},
											"IDSerie": {
												"value": {
													"value": "@json(item()).IDSerie",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Valor": {
												"value": {
													"value": "@json(item()).Value",
													"type": "Expression"
												},
												"type": "Double"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "rcPhoenixSAD410_ADF_Teste",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"AA": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TesteMoedasBacen_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoedasBacenCSV",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoedasBacen",
								"type": "DatasetReference",
								"parameters": {
									"a": "a"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "geraSeriesBacen",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "MoedasBacenCSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GeraSeriesMoedasBacen ",
							"method": "POST",
							"headers": {},
							"body": {
								"valores_moedas": "@activity('MoedasBacenCSV').output.value"
							}
						},
						"linkedServiceName": {
							"referenceName": "geraSeriesMoedasBacen",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"container_name": {
						"type": "String",
						"defaultValue": "bacen"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TriggerDiario8h')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "AtualizaINCCM",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "AtualizaIGPDI",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "AtualizaIGPM",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-02-14T13:23:00",
						"timeZone": "Bahia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/AtualizaINCCM')]",
				"[concat(variables('factoryId'), '/pipelines/AtualizaIGPDI')]",
				"[concat(variables('factoryId'), '/pipelines/AtualizaIGPM')]"
			]
		}
	]
}